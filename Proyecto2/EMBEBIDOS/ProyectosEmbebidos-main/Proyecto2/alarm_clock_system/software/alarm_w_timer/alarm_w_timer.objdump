
alarm_w_timer.elf:     file format elf32-littlenios2
alarm_w_timer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000398 memsz 0x00000398 flags r-x
    LOAD off    0x000013b8 vaddr 0x000013b8 paddr 0x000013dc align 2**12
         filesz 0x00000024 memsz 0x00000024 flags rw-
    LOAD off    0x00001400 vaddr 0x00001400 paddr 0x00001400 align 2**12
         filesz 0x00000000 memsz 0x0000001c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000013dc  2**0
                  CONTENTS
  2 .text         00000384  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  000013a4  000013a4  000013a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000024  000013b8  000013dc  000013b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000001c  00001400  00001400  00001400  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  0000141c  0000141c  000013dc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000170  00000000  00000000  00001400  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c67  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006b6  00000000  00000000  000021d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000752  00000000  00000000  0000288d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001d0  00000000  00000000  00002fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000067e  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  0000382e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003930  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00003940  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004875  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000487b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000487c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000487d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004881  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004885  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00004889  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000050  00000000  00000000  0000488f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00058731  00000000  00000000  000048df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
000013a4 l    d  .rodata	00000000 .rodata
000013b8 l    d  .rwdata	00000000 .rwdata
00001400 l    d  .bss	00000000 .bss
0000141c l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_w_timer_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000012bc g     F .text	0000002c alt_main
000010fc g     F .text	00000060 increment_minutes
000013dc g       *ABS*	00000000 __flash_rwdata_start
000013d8 g     O .rwdata	00000004 UART
000012e8 g     F .text	00000038 alt_putstr
00001380 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
0000140c g     O .bss	00000004 alarm_H_1
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001414 g     O .bss	00000004 alt_argv
000093b8 g       *ABS*	00000000 _gp
0000115c g     F .text	00000060 increment_time
00001400 g     O .bss	00000004 alarm_S_2
0000141c g       *ABS*	00000000 __bss_end
000013b8 g     O .rwdata	00000004 alarm_S_1
00001408 g     O .bss	00000004 alarm_H_2
000013d0 g     O .rwdata	00000004 H_2
00001378 g     F .text	00000004 alt_dcache_flush_all
000013dc g       *ABS*	00000000 __ram_rwdata_end
000013b8 g       *ABS*	00000000 __ram_rodata_end
000013c0 g     O .rwdata	00000004 S_2
0000141c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000013cc g     O .rwdata	00000004 M_1
00001344 g     F .text	00000034 altera_avalon_jtag_uart_write
00001404 g     O .bss	00000004 alarm_M_1
00001020 g     F .text	0000003c _start
00001340 g     F .text	00000004 alt_sys_init
000013d4 g     O .rwdata	00000004 H_1
000013b8 g       *ABS*	00000000 __ram_rwdata_start
000013a4 g       *ABS*	00000000 __ram_rodata_start
0000141c g       *ABS*	00000000 __alt_stack_base
000013c8 g     O .rwdata	00000004 M_2
00001400 g       *ABS*	00000000 __bss_start
000011bc g     F .text	00000020 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001410 g     O .bss	00000004 alt_envp
000013a4 g       *ABS*	00000000 __flash_rodata_start
00001320 g     F .text	00000020 alt_irq_init
00001418 g     O .bss	00000004 alt_argc
000013c4 g     O .rwdata	00000004 S_1
00001020 g       *ABS*	00000000 __ram_exceptions_start
000013dc g       *ABS*	00000000 _edata
0000141c g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000105c g     F .text	00000034 init_time
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000013bc g     O .rwdata	00000004 alarm_M_2
00001388 g     F .text	0000001c strlen
0000137c g     F .text	00000004 alt_icache_flush_all
000011dc g     F .text	000000e0 alt_load
00001090 g     F .text	0000006c increment_hours



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4ee14 	ori	gp,gp,37816
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10850014 	ori	r2,r2,5120

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c50714 	ori	r3,r3,5148

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7c8c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011dc0 	call	11dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00012bc0 	call	12bc <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7ca0>

0000105c <init_time>:
  return 0;
}

void init_time()
{
	*H_1 = 0;
    105c:	d0a00717 	ldw	r2,-32740(gp)
    1060:	10000005 	stb	zero,0(r2)
	*H_2 = 0;
    1064:	d0a00617 	ldw	r2,-32744(gp)
    1068:	10000005 	stb	zero,0(r2)
	*M_1 = 0;
    106c:	d0a00517 	ldw	r2,-32748(gp)
    1070:	10000005 	stb	zero,0(r2)
	*M_2 = 0;
    1074:	d0a00417 	ldw	r2,-32752(gp)
    1078:	10000005 	stb	zero,0(r2)
	*S_1 = 0;
    107c:	d0a00317 	ldw	r2,-32756(gp)
    1080:	10000005 	stb	zero,0(r2)
	*S_2 = 0;
    1084:	d0a00217 	ldw	r2,-32760(gp)
    1088:	10000005 	stb	zero,0(r2)
    108c:	f800283a 	ret

00001090 <increment_hours>:
	}
}

void increment_hours()
{
	if ((unsigned int)(*H_1) < 2)
    1090:	d0e00717 	ldw	r3,-32740(gp)
    1094:	01400044 	movi	r5,1
    1098:	d0a00617 	ldw	r2,-32744(gp)
    109c:	19000003 	ldbu	r4,0(r3)
    10a0:	21003fcc 	andi	r4,r4,255
    10a4:	29000936 	bltu	r5,r4,10cc <increment_hours+0x3c>
	{
		if ((unsigned int)(*H_2) < 9)
    10a8:	11000003 	ldbu	r4,0(r2)
    10ac:	01400204 	movi	r5,8
    10b0:	21003fcc 	andi	r4,r4,255
    10b4:	2900092e 	bgeu	r5,r4,10dc <increment_hours+0x4c>
			*H_2 = *H_2 + 1;
		//The hours's least significant digit reached the limit
		//Time to increase hour's most significant digit
		else
		{
			*H_1 = *H_1 + 1;
    10b8:	18800003 	ldbu	r2,0(r3)
    10bc:	10800044 	addi	r2,r2,1
    10c0:	18800005 	stb	r2,0(r3)
			*H_2 = 0;
    10c4:	d0a00617 	ldw	r2,-32744(gp)
    10c8:	00000a06 	br	10f4 <increment_hours+0x64>
		}
	}
	else
	{
		if ((unsigned int)(*H_2) < 3)
    10cc:	10c00003 	ldbu	r3,0(r2)
    10d0:	01000084 	movi	r4,2
    10d4:	18c03fcc 	andi	r3,r3,255
    10d8:	20c00436 	bltu	r4,r3,10ec <increment_hours+0x5c>
			//Increases hours's least significant digit
			*H_2 = *H_2 + 1;
    10dc:	10c00003 	ldbu	r3,0(r2)
    10e0:	18c00044 	addi	r3,r3,1
    10e4:	10c00005 	stb	r3,0(r2)
    10e8:	f800283a 	ret
		//The hours's digits reached the limit
		else
		{
			*H_2 = 0;
    10ec:	10000005 	stb	zero,0(r2)
			*H_1 = 0;
    10f0:	d0a00717 	ldw	r2,-32740(gp)
    10f4:	10000005 	stb	zero,0(r2)
    10f8:	f800283a 	ret

000010fc <increment_minutes>:
	}
}

void increment_minutes()
{
	if ((unsigned int)(*M_2) < 9)
    10fc:	d0a00417 	ldw	r2,-32752(gp)
    1100:	01000204 	movi	r4,8
    1104:	10c00003 	ldbu	r3,0(r2)
    1108:	18c03fcc 	andi	r3,r3,255
    110c:	20c00436 	bltu	r4,r3,1120 <increment_minutes+0x24>
		//Increases minutes's least significant digit
		*M_2 = *M_2 + 1;
    1110:	10c00003 	ldbu	r3,0(r2)
    1114:	18c00044 	addi	r3,r3,1
    1118:	10c00005 	stb	r3,0(r2)
    111c:	f800283a 	ret
	//The minutes's least significant digit reached the limit
	//Time to increase minutes's most significant digit
	else
	{
		if ((unsigned int)(*M_1) < 5)
    1120:	d0e00517 	ldw	r3,-32748(gp)
    1124:	01400104 	movi	r5,4
    1128:	19000003 	ldbu	r4,0(r3)
    112c:	21003fcc 	andi	r4,r4,255
    1130:	29000636 	bltu	r5,r4,114c <increment_minutes+0x50>
		{
			//Increases minutes's most significant digit
			*M_1 = *M_1 + 1;
    1134:	18800003 	ldbu	r2,0(r3)
    1138:	10800044 	addi	r2,r2,1
    113c:	18800005 	stb	r2,0(r3)
			*M_2 = 0;
    1140:	d0a00417 	ldw	r2,-32752(gp)
    1144:	10000005 	stb	zero,0(r2)
    1148:	f800283a 	ret
		}
		else
		{
			*M_2 = 0;
    114c:	10000005 	stb	zero,0(r2)
			*M_1 = 0;
    1150:	d0a00517 	ldw	r2,-32748(gp)
    1154:	10000005 	stb	zero,0(r2)
			increment_hours();
    1158:	00010901 	jmpi	1090 <increment_hours>

0000115c <increment_time>:
	*S_2 = 0;
}

void increment_time()
{
	if ((unsigned int)(*S_2) < 9)
    115c:	d0a00217 	ldw	r2,-32760(gp)
    1160:	01000204 	movi	r4,8
    1164:	10c00003 	ldbu	r3,0(r2)
    1168:	18c03fcc 	andi	r3,r3,255
    116c:	20c00436 	bltu	r4,r3,1180 <increment_time+0x24>
		//Increases seconds's least significant digit
		*S_2 = *S_2 + 1;
    1170:	10c00003 	ldbu	r3,0(r2)
    1174:	18c00044 	addi	r3,r3,1
    1178:	10c00005 	stb	r3,0(r2)
    117c:	f800283a 	ret
	//The seconds's least significant digit reached the limit
	//Time to increase seconds's most significant digit
	else
	{
		if ((unsigned int)(*S_1) < 5)
    1180:	d0e00317 	ldw	r3,-32756(gp)
    1184:	01400104 	movi	r5,4
    1188:	19000003 	ldbu	r4,0(r3)
    118c:	21003fcc 	andi	r4,r4,255
    1190:	29000636 	bltu	r5,r4,11ac <increment_time+0x50>
		{
			//Increases seconds's most significant digit
			*S_1 = *S_1 + 1;
    1194:	18800003 	ldbu	r2,0(r3)
    1198:	10800044 	addi	r2,r2,1
    119c:	18800005 	stb	r2,0(r3)
			*S_2 = 0;
    11a0:	d0a00217 	ldw	r2,-32760(gp)
    11a4:	10000005 	stb	zero,0(r2)
    11a8:	f800283a 	ret
		}
		else
		{
			*S_2 = 0;
    11ac:	10000005 	stb	zero,0(r2)
			*S_1 = 0;
    11b0:	d0a00317 	ldw	r2,-32756(gp)
    11b4:	10000005 	stb	zero,0(r2)
			increment_minutes();
    11b8:	00010fc1 	jmpi	10fc <increment_minutes>

000011bc <main>:
void increment_minutes();
void increment_hours();

int main()
{ 
  alt_putstr("Alarm clock system\n");
    11bc:	01000034 	movhi	r4,0
void increment_time();
void increment_minutes();
void increment_hours();

int main()
{ 
    11c0:	deffff04 	addi	sp,sp,-4
  alt_putstr("Alarm clock system\n");
    11c4:	2104e904 	addi	r4,r4,5028
void increment_time();
void increment_minutes();
void increment_hours();

int main()
{ 
    11c8:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Alarm clock system\n");
    11cc:	00012e80 	call	12e8 <alt_putstr>

  init_time();
    11d0:	000105c0 	call	105c <init_time>

  /* Event loop never exits. */
  while (1)
  {
	  increment_time();
    11d4:	000115c0 	call	115c <increment_time>
    11d8:	003ffe06 	br	11d4 <_gp+0xffff7e1c>

000011dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11dc:	deffff04 	addi	sp,sp,-4
    11e0:	01000034 	movhi	r4,0
    11e4:	01400034 	movhi	r5,0
    11e8:	dfc00015 	stw	ra,0(sp)
    11ec:	2104ee04 	addi	r4,r4,5048
    11f0:	2944f704 	addi	r5,r5,5084

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    11f4:	2140061e 	bne	r4,r5,1210 <alt_load+0x34>
    11f8:	01000034 	movhi	r4,0
    11fc:	01400034 	movhi	r5,0
    1200:	21040804 	addi	r4,r4,4128
    1204:	29440804 	addi	r5,r5,4128
    1208:	2140121e 	bne	r4,r5,1254 <alt_load+0x78>
    120c:	00000b06 	br	123c <alt_load+0x60>
    1210:	00c00034 	movhi	r3,0
    1214:	18c4f704 	addi	r3,r3,5084
    1218:	1907c83a 	sub	r3,r3,r4
    121c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1220:	10fff526 	beq	r2,r3,11f8 <_gp+0xffff7e40>
    {
      *to++ = *from++;
    1224:	114f883a 	add	r7,r2,r5
    1228:	39c00017 	ldw	r7,0(r7)
    122c:	110d883a 	add	r6,r2,r4
    1230:	10800104 	addi	r2,r2,4
    1234:	31c00015 	stw	r7,0(r6)
    1238:	003ff906 	br	1220 <_gp+0xffff7e68>
    123c:	01000034 	movhi	r4,0
    1240:	01400034 	movhi	r5,0
    1244:	2104e904 	addi	r4,r4,5028
    1248:	2944e904 	addi	r5,r5,5028

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    124c:	2140101e 	bne	r4,r5,1290 <alt_load+0xb4>
    1250:	00000b06 	br	1280 <alt_load+0xa4>
    1254:	00c00034 	movhi	r3,0
    1258:	18c40804 	addi	r3,r3,4128
    125c:	1907c83a 	sub	r3,r3,r4
    1260:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1264:	10fff526 	beq	r2,r3,123c <_gp+0xffff7e84>
    {
      *to++ = *from++;
    1268:	114f883a 	add	r7,r2,r5
    126c:	39c00017 	ldw	r7,0(r7)
    1270:	110d883a 	add	r6,r2,r4
    1274:	10800104 	addi	r2,r2,4
    1278:	31c00015 	stw	r7,0(r6)
    127c:	003ff906 	br	1264 <_gp+0xffff7eac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1280:	00013780 	call	1378 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1284:	dfc00017 	ldw	ra,0(sp)
    1288:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    128c:	000137c1 	jmpi	137c <alt_icache_flush_all>
    1290:	00c00034 	movhi	r3,0
    1294:	18c4ee04 	addi	r3,r3,5048
    1298:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    129c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12a0:	18bff726 	beq	r3,r2,1280 <_gp+0xffff7ec8>
    {
      *to++ = *from++;
    12a4:	114f883a 	add	r7,r2,r5
    12a8:	39c00017 	ldw	r7,0(r7)
    12ac:	110d883a 	add	r6,r2,r4
    12b0:	10800104 	addi	r2,r2,4
    12b4:	31c00015 	stw	r7,0(r6)
    12b8:	003ff906 	br	12a0 <_gp+0xffff7ee8>

000012bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12c8:	00013200 	call	1320 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    12cc:	00013400 	call	1340 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12d0:	d1a01617 	ldw	r6,-32680(gp)
    12d4:	d1601717 	ldw	r5,-32676(gp)
    12d8:	d1201817 	ldw	r4,-32672(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    12dc:	dfc00017 	ldw	ra,0(sp)
    12e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12e4:	00011bc1 	jmpi	11bc <main>

000012e8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    12e8:	defffe04 	addi	sp,sp,-8
    12ec:	dc000015 	stw	r16,0(sp)
    12f0:	dfc00115 	stw	ra,4(sp)
    12f4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    12f8:	00013880 	call	1388 <strlen>
    12fc:	01000034 	movhi	r4,0
    1300:	000f883a 	mov	r7,zero
    1304:	100d883a 	mov	r6,r2
    1308:	800b883a 	mov	r5,r16
    130c:	2104f604 	addi	r4,r4,5080
#else
    return fputs(str, stdout);
#endif
#endif
}
    1310:	dfc00117 	ldw	ra,4(sp)
    1314:	dc000017 	ldw	r16,0(sp)
    1318:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    131c:	00013441 	jmpi	1344 <altera_avalon_jtag_uart_write>

00001320 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1320:	deffff04 	addi	sp,sp,-4
    1324:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1328:	00013800 	call	1380 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    132c:	00800044 	movi	r2,1
    1330:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1334:	dfc00017 	ldw	ra,0(sp)
    1338:	dec00104 	addi	sp,sp,4
    133c:	f800283a 	ret

00001340 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1340:	f800283a 	ret

00001344 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1344:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1348:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    134c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1350:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1354:	2980072e 	bgeu	r5,r6,1374 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1358:	38c00037 	ldwio	r3,0(r7)
    135c:	18ffffec 	andhi	r3,r3,65535
    1360:	183ffc26 	beq	r3,zero,1354 <_gp+0xffff7f9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1364:	28c00007 	ldb	r3,0(r5)
    1368:	20c00035 	stwio	r3,0(r4)
    136c:	29400044 	addi	r5,r5,1
    1370:	003ff806 	br	1354 <_gp+0xffff7f9c>

  return count;
}
    1374:	f800283a 	ret

00001378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1378:	f800283a 	ret

0000137c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    137c:	f800283a 	ret

00001380 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1380:	000170fa 	wrctl	ienable,zero
    1384:	f800283a 	ret

00001388 <strlen>:
    1388:	2005883a 	mov	r2,r4
    138c:	10c00007 	ldb	r3,0(r2)
    1390:	18000226 	beq	r3,zero,139c <strlen+0x14>
    1394:	10800044 	addi	r2,r2,1
    1398:	003ffc06 	br	138c <_gp+0xffff7fd4>
    139c:	1105c83a 	sub	r2,r2,r4
    13a0:	f800283a 	ret
