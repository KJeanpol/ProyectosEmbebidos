
CLOCK2020.elf:     file format elf32-littlenios2
CLOCK2020.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001180

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x000005d4 memsz 0x000005d4 flags r-x
    LOAD off    0x000015f4 vaddr 0x000015f4 paddr 0x0000161c align 2**12
         filesz 0x00000028 memsz 0x00000028 flags rw-
    LOAD off    0x00001644 vaddr 0x00001644 paddr 0x00001644 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000464  00001180  00001180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  000015e4  000015e4  000015e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000028  000015f4  0000161c  000015f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  00001644  00001644  00001644  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00001774  00001774  0000161c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000258  00000000  00000000  00001640  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001590  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b24  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b1a  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000244  00000000  00000000  00004468  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ca5  00000000  00000000  000046ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000002f3  00000000  00000000  00005351  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00005644  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00005658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006871  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006877  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00006878  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00006879  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000687d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00006881  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00006885  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000050  00000000  00000000  0000688b  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005fb10  00000000  00000000  000068db  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001180 l    d  .text	00000000 .text
000015e4 l    d  .rodata	00000000 .rodata
000015f4 l    d  .rwdata	00000000 .rwdata
00001644 l    d  .bss	00000000 .bss
00001774 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../CLOCK2020_bsp//obj/HAL/src/crt0.o
000011b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00001670 g     O .bss	00000004 alt_instruction_exception_handler
00001488 g     F .text	0000002c alt_main
00001674 g     O .bss	00000100 alt_irq
00001228 g     F .text	00000060 increment_minutes
0000161c g       *ABS*	00000000 __flash_rwdata_start
00001618 g     O .rwdata	00000004 UART
000014b4 g     F .text	00000038 alt_putstr
0000154c g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001648 g     O .bss	00000004 alarm_H_1
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001668 g     O .bss	00000004 alt_argv
000095f4 g       *ABS*	00000000 _gp
00001288 g     F .text	00000060 increment_time
00001554 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000164c g     O .bss	00000004 alarm_S_2
00001314 g     F .text	00000094 alt_irq_register
00001774 g       *ABS*	00000000 __bss_end
00001650 g     O .bss	00000004 alarm_S_1
00001654 g     O .bss	00000004 alarm_H_2
0000160c g     O .rwdata	00000004 H_2
00001660 g     O .bss	00000004 alt_irq_active
000010fc g     F .exceptions	00000060 alt_irq_handler
00001544 g     F .text	00000004 alt_dcache_flush_all
0000161c g       *ABS*	00000000 __ram_rwdata_end
000015f4 g       *ABS*	00000000 __ram_rodata_end
000015fc g     O .rwdata	00000004 S_2
00001774 g       *ABS*	00000000 end
000015f8 g     O .rwdata	00000004 SYS_CLK_TIMER_BASE
0000115c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001608 g     O .rwdata	00000004 M_1
00001510 g     F .text	00000034 altera_avalon_jtag_uart_write
00001658 g     O .bss	00000004 alarm_M_1
00001180 g     F .text	0000003c _start
0000150c g     F .text	00000004 alt_sys_init
00001610 g     O .rwdata	00000004 H_1
000015f4 g       *ABS*	00000000 __ram_rwdata_start
000015e4 g       *ABS*	00000000 __ram_rodata_start
00001774 g       *ABS*	00000000 __alt_stack_base
00001604 g     O .rwdata	00000004 M_2
000015f4 g     O .rwdata	00000004 SYS_CLK_TIMER_IRQ
00001644 g       *ABS*	00000000 __bss_start
000012e8 g     F .text	0000002c main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001664 g     O .bss	00000004 alt_envp
000015e4 g       *ABS*	00000000 __flash_rodata_start
000014ec g     F .text	00000020 alt_irq_init
0000166c g     O .bss	00000004 alt_argc
00001600 g     O .rwdata	00000004 S_1
00001020 g       .exceptions	00000000 alt_irq_entry
00001020 g       *ABS*	00000000 __ram_exceptions_start
0000161c g       *ABS*	00000000 _edata
00001774 g       *ABS*	00000000 _end
00001180 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
00001020 g     F .exceptions	00000000 alt_exception
0000100c g       .entry	00000000 _exit
0000165c g     O .bss	00000004 alarm_M_2
000015c8 g     F .text	0000001c strlen
00001548 g     F .text	00000004 alt_icache_flush_all
00001614 g     O .rwdata	00000004 alt_priority_mask
00001644 g     O .bss	00000004 SYS_CLK_TIMER_IRQ_INTERRUPT_CONTROLLER_ID
000013a8 g     F .text	000000e0 alt_load
000011bc g     F .text	0000006c increment_hours



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08446014 	ori	at,at,4480
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .exceptions:

00001020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    1020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    1024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    1028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    102c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    1030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    1034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    1038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    103c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    1040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    1044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    1048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    104c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    1050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    1054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    1058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    105c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    1060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    1064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    1068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    106c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    1070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    1074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    1078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    107c:	10000326 	beq	r2,zero,108c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    1080:	20000226 	beq	r4,zero,108c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    1084:	00010fc0 	call	10fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    1088:	00000706 	br	10a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    108c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    1090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    1094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    1098:	000115c0 	call	115c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    109c:	1000021e 	bne	r2,zero,10a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    10a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    10a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    10a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    10ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    10b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    10b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    10b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    10bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    10c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    10c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    10c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    10cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    10d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    10d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    10d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    10dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    10e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    10e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    10e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    10ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    10f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    10f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    10f8:	ef80083a 	eret

000010fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    10fc:	defffe04 	addi	sp,sp,-8
    1100:	dfc00115 	stw	ra,4(sp)
    1104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    1108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    110c:	04000034 	movhi	r16,0
    1110:	84059d04 	addi	r16,r16,5748

  active = alt_irq_pending ();

  do
  {
    i = 0;
    1114:	0005883a 	mov	r2,zero
    mask = 1;
    1118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    111c:	20ca703a 	and	r5,r4,r3
    1120:	28000b26 	beq	r5,zero,1150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    1124:	100490fa 	slli	r2,r2,3
    1128:	8085883a 	add	r2,r16,r2
    112c:	10c00017 	ldw	r3,0(r2)
    1130:	11000117 	ldw	r4,4(r2)
    1134:	183ee83a 	callr	r3
    1138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    113c:	203ff51e 	bne	r4,zero,1114 <_gp+0xffff7b20>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	dc000017 	ldw	r16,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    1150:	18c7883a 	add	r3,r3,r3
      i++;
    1154:	10800044 	addi	r2,r2,1

    } while (1);
    1158:	003ff006 	br	111c <_gp+0xffff7b28>

0000115c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    115c:	d0a01f17 	ldw	r2,-32644(gp)
    1160:	10000426 	beq	r2,zero,1174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    1164:	200b883a 	mov	r5,r4
    1168:	000d883a 	mov	r6,zero
    116c:	013fffc4 	movi	r4,-1
    1170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    1174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    1178:	0005883a 	mov	r2,zero
    117c:	f800283a 	ret

Disassembly of section .text:

00001180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    118c:	d6a57d14 	ori	gp,gp,38388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1194:	10859114 	ori	r2,r2,5700

    movhi r3, %hi(__bss_end)
    1198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    119c:	18c5dd14 	ori	r3,r3,6004

    beq r2, r3, 1f
    11a0:	10c00326 	beq	r2,r3,11b0 <_start+0x30>

0:
    stw zero, (r2)
    11a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    11a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    11ac:	10fffd36 	bltu	r2,r3,11a4 <_gp+0xffff7bb0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    11b0:	00013a80 	call	13a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    11b4:	00014880 	call	1488 <alt_main>

000011b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    11b8:	003fff06 	br	11b8 <_gp+0xffff7bc4>

000011bc <increment_hours>:
	}
}

void increment_hours()
{
	if ((unsigned int)(*H_1) < 2)
    11bc:	d0e00717 	ldw	r3,-32740(gp)
    11c0:	01400044 	movi	r5,1
    11c4:	d0a00617 	ldw	r2,-32744(gp)
    11c8:	19000003 	ldbu	r4,0(r3)
    11cc:	21003fcc 	andi	r4,r4,255
    11d0:	29000936 	bltu	r5,r4,11f8 <increment_hours+0x3c>
	{
		if ((unsigned int)(*H_2) < 9)
    11d4:	11000003 	ldbu	r4,0(r2)
    11d8:	01400204 	movi	r5,8
    11dc:	21003fcc 	andi	r4,r4,255
    11e0:	2900092e 	bgeu	r5,r4,1208 <increment_hours+0x4c>
			*H_2 = *H_2 + 1;
		//The hours's least significant digit reached the limit
		//Time to increase hour's most significant digit
		else
		{
			*H_1 = *H_1 + 1;
    11e4:	18800003 	ldbu	r2,0(r3)
    11e8:	10800044 	addi	r2,r2,1
    11ec:	18800005 	stb	r2,0(r3)
			*H_2 = 0;
    11f0:	d0a00617 	ldw	r2,-32744(gp)
    11f4:	00000a06 	br	1220 <increment_hours+0x64>
		}
	}
	else
	{
		if ((unsigned int)(*H_2) < 3)
    11f8:	10c00003 	ldbu	r3,0(r2)
    11fc:	01000084 	movi	r4,2
    1200:	18c03fcc 	andi	r3,r3,255
    1204:	20c00436 	bltu	r4,r3,1218 <increment_hours+0x5c>
			//Increases hours's least significant digit
			*H_2 = *H_2 + 1;
    1208:	10c00003 	ldbu	r3,0(r2)
    120c:	18c00044 	addi	r3,r3,1
    1210:	10c00005 	stb	r3,0(r2)
    1214:	f800283a 	ret
		//The hours's digits reached the limit
		else
		{
			*H_2 = 0;
    1218:	10000005 	stb	zero,0(r2)
			*H_1 = 0;
    121c:	d0a00717 	ldw	r2,-32740(gp)
    1220:	10000005 	stb	zero,0(r2)
    1224:	f800283a 	ret

00001228 <increment_minutes>:
	}
}

void increment_minutes()
{
	if ((unsigned int)(*M_2) < 9)
    1228:	d0a00417 	ldw	r2,-32752(gp)
    122c:	01000204 	movi	r4,8
    1230:	10c00003 	ldbu	r3,0(r2)
    1234:	18c03fcc 	andi	r3,r3,255
    1238:	20c00436 	bltu	r4,r3,124c <increment_minutes+0x24>
		//Increases minutes's least significant digit
		*M_2 = *M_2 + 1;
    123c:	10c00003 	ldbu	r3,0(r2)
    1240:	18c00044 	addi	r3,r3,1
    1244:	10c00005 	stb	r3,0(r2)
    1248:	f800283a 	ret
	//The minutes's least significant digit reached the limit
	//Time to increase minutes's most significant digit
	else
	{
		if ((unsigned int)(*M_1) < 5)
    124c:	d0e00517 	ldw	r3,-32748(gp)
    1250:	01400104 	movi	r5,4
    1254:	19000003 	ldbu	r4,0(r3)
    1258:	21003fcc 	andi	r4,r4,255
    125c:	29000636 	bltu	r5,r4,1278 <increment_minutes+0x50>
		{
			//Increases minutes's most significant digit
			*M_1 = *M_1 + 1;
    1260:	18800003 	ldbu	r2,0(r3)
    1264:	10800044 	addi	r2,r2,1
    1268:	18800005 	stb	r2,0(r3)
			*M_2 = 0;
    126c:	d0a00417 	ldw	r2,-32752(gp)
    1270:	10000005 	stb	zero,0(r2)
    1274:	f800283a 	ret
		}
		else
		{
			*M_2 = 0;
    1278:	10000005 	stb	zero,0(r2)
			*M_1 = 0;
    127c:	d0a00517 	ldw	r2,-32748(gp)
    1280:	10000005 	stb	zero,0(r2)
			increment_hours();
    1284:	00011bc1 	jmpi	11bc <increment_hours>

00001288 <increment_time>:
void increment_minutes();
void increment_hours();

void increment_time(void *context)
{
	if ((unsigned int)(*S_2) < 9)
    1288:	d0a00217 	ldw	r2,-32760(gp)
    128c:	01000204 	movi	r4,8
    1290:	10c00003 	ldbu	r3,0(r2)
    1294:	18c03fcc 	andi	r3,r3,255
    1298:	20c00436 	bltu	r4,r3,12ac <increment_time+0x24>
		//Increases seconds's least significant digit
		*S_2 = *S_2 + 1;
    129c:	10c00003 	ldbu	r3,0(r2)
    12a0:	18c00044 	addi	r3,r3,1
    12a4:	10c00005 	stb	r3,0(r2)
    12a8:	f800283a 	ret
	//The seconds's least significant digit reached the limit
	//Time to increase seconds's most significant digit
	else
	{
		if ((unsigned int)(*S_1) < 5)
    12ac:	d0e00317 	ldw	r3,-32756(gp)
    12b0:	01400104 	movi	r5,4
    12b4:	19000003 	ldbu	r4,0(r3)
    12b8:	21003fcc 	andi	r4,r4,255
    12bc:	29000636 	bltu	r5,r4,12d8 <increment_time+0x50>
		{
			//Increases seconds's most significant digit
			*S_1 = *S_1 + 1;
    12c0:	18800003 	ldbu	r2,0(r3)
    12c4:	10800044 	addi	r2,r2,1
    12c8:	18800005 	stb	r2,0(r3)
			*S_2 = 0;
    12cc:	d0a00217 	ldw	r2,-32760(gp)
    12d0:	10000005 	stb	zero,0(r2)
    12d4:	f800283a 	ret
		}
		else
		{
			*S_2 = 0;
    12d8:	10000005 	stb	zero,0(r2)
			*S_1 = 0;
    12dc:	d0a00317 	ldw	r2,-32756(gp)
    12e0:	10000005 	stb	zero,0(r2)
			increment_minutes();
    12e4:	00012281 	jmpi	1228 <increment_minutes>

000012e8 <main>:



int main()
{
	 alt_putstr("Alarm System!\n");
    12e8:	01000034 	movhi	r4,0
}



int main()
{
    12ec:	defffe04 	addi	sp,sp,-8
	 alt_putstr("Alarm System!\n");
    12f0:	21057904 	addi	r4,r4,5604
}



int main()
{
    12f4:	dfc00115 	stw	ra,4(sp)
	 alt_putstr("Alarm System!\n");
    12f8:	00014b40 	call	14b4 <alt_putstr>
	 volatile int captureEdge;
	 alt_irq_register(TIMER_IRQ, (void*) &captureEdge, increment_time);
    12fc:	01800034 	movhi	r6,0
    1300:	3184a204 	addi	r6,r6,4744
    1304:	d80b883a 	mov	r5,sp
    1308:	01000044 	movi	r4,1
    130c:	00013140 	call	1314 <alt_irq_register>
    1310:	003fff06 	br	1310 <_gp+0xffff7d1c>

00001314 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1314:	008007c4 	movi	r2,31
    1318:	11002136 	bltu	r2,r4,13a0 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    131c:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1320:	00ffff84 	movi	r3,-2
    1324:	38c4703a 	and	r2,r7,r3
    1328:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    132c:	200490fa 	slli	r2,r4,3
    1330:	02000034 	movhi	r8,0
    1334:	42059d04 	addi	r8,r8,5748
    1338:	4085883a 	add	r2,r8,r2
    133c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    1340:	11400115 	stw	r5,4(r2)
    1344:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1348:	30000726 	beq	r6,zero,1368 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    134c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1350:	28c6703a 	and	r3,r5,r3
    1354:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    1358:	d0e01b17 	ldw	r3,-32660(gp)
    135c:	1104983a 	sll	r2,r2,r4
    1360:	10c4b03a 	or	r2,r2,r3
    1364:	00000706 	br	1384 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1368:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    136c:	28c6703a 	and	r3,r5,r3
    1370:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    1374:	1104983a 	sll	r2,r2,r4
    1378:	d0e01b17 	ldw	r3,-32660(gp)
    137c:	0084303a 	nor	r2,zero,r2
    1380:	10c4703a 	and	r2,r2,r3
    1384:	d0a01b15 	stw	r2,-32660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1388:	d0a01b17 	ldw	r2,-32660(gp)
    138c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1390:	2801703a 	wrctl	status,r5
    1394:	3801703a 	wrctl	status,r7
    1398:	0005883a 	mov	r2,zero
    139c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    13a0:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    13a4:	f800283a 	ret

000013a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    13a8:	deffff04 	addi	sp,sp,-4
    13ac:	01000034 	movhi	r4,0
    13b0:	01400034 	movhi	r5,0
    13b4:	dfc00015 	stw	ra,0(sp)
    13b8:	21057d04 	addi	r4,r4,5620
    13bc:	29458704 	addi	r5,r5,5660

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    13c0:	2140061e 	bne	r4,r5,13dc <alt_load+0x34>
    13c4:	01000034 	movhi	r4,0
    13c8:	01400034 	movhi	r5,0
    13cc:	21040804 	addi	r4,r4,4128
    13d0:	29440804 	addi	r5,r5,4128
    13d4:	2140121e 	bne	r4,r5,1420 <alt_load+0x78>
    13d8:	00000b06 	br	1408 <alt_load+0x60>
    13dc:	00c00034 	movhi	r3,0
    13e0:	18c58704 	addi	r3,r3,5660
    13e4:	1907c83a 	sub	r3,r3,r4
    13e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    13ec:	10fff526 	beq	r2,r3,13c4 <_gp+0xffff7dd0>
    {
      *to++ = *from++;
    13f0:	114f883a 	add	r7,r2,r5
    13f4:	39c00017 	ldw	r7,0(r7)
    13f8:	110d883a 	add	r6,r2,r4
    13fc:	10800104 	addi	r2,r2,4
    1400:	31c00015 	stw	r7,0(r6)
    1404:	003ff906 	br	13ec <_gp+0xffff7df8>
    1408:	01000034 	movhi	r4,0
    140c:	01400034 	movhi	r5,0
    1410:	21057904 	addi	r4,r4,5604
    1414:	29457904 	addi	r5,r5,5604

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1418:	2140101e 	bne	r4,r5,145c <alt_load+0xb4>
    141c:	00000b06 	br	144c <alt_load+0xa4>
    1420:	00c00034 	movhi	r3,0
    1424:	18c46004 	addi	r3,r3,4480
    1428:	1907c83a 	sub	r3,r3,r4
    142c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1430:	10fff526 	beq	r2,r3,1408 <_gp+0xffff7e14>
    {
      *to++ = *from++;
    1434:	114f883a 	add	r7,r2,r5
    1438:	39c00017 	ldw	r7,0(r7)
    143c:	110d883a 	add	r6,r2,r4
    1440:	10800104 	addi	r2,r2,4
    1444:	31c00015 	stw	r7,0(r6)
    1448:	003ff906 	br	1430 <_gp+0xffff7e3c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    144c:	00015440 	call	1544 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1450:	dfc00017 	ldw	ra,0(sp)
    1454:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1458:	00015481 	jmpi	1548 <alt_icache_flush_all>
    145c:	00c00034 	movhi	r3,0
    1460:	18c57d04 	addi	r3,r3,5620
    1464:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1468:	0005883a 	mov	r2,zero
  {
    while( to != end )
    146c:	18bff726 	beq	r3,r2,144c <_gp+0xffff7e58>
    {
      *to++ = *from++;
    1470:	114f883a 	add	r7,r2,r5
    1474:	39c00017 	ldw	r7,0(r7)
    1478:	110d883a 	add	r6,r2,r4
    147c:	10800104 	addi	r2,r2,4
    1480:	31c00015 	stw	r7,0(r6)
    1484:	003ff906 	br	146c <_gp+0xffff7e78>

00001488 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1488:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    148c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1490:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1494:	00014ec0 	call	14ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1498:	000150c0 	call	150c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    149c:	d1a01c17 	ldw	r6,-32656(gp)
    14a0:	d1601d17 	ldw	r5,-32652(gp)
    14a4:	d1201e17 	ldw	r4,-32648(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    14a8:	dfc00017 	ldw	ra,0(sp)
    14ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    14b0:	00012e81 	jmpi	12e8 <main>

000014b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    14b4:	defffe04 	addi	sp,sp,-8
    14b8:	dc000015 	stw	r16,0(sp)
    14bc:	dfc00115 	stw	ra,4(sp)
    14c0:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    14c4:	00015c80 	call	15c8 <strlen>
    14c8:	01000034 	movhi	r4,0
    14cc:	000f883a 	mov	r7,zero
    14d0:	100d883a 	mov	r6,r2
    14d4:	800b883a 	mov	r5,r16
    14d8:	21058604 	addi	r4,r4,5656
#else
    return fputs(str, stdout);
#endif
#endif
}
    14dc:	dfc00117 	ldw	ra,4(sp)
    14e0:	dc000017 	ldw	r16,0(sp)
    14e4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    14e8:	00015101 	jmpi	1510 <altera_avalon_jtag_uart_write>

000014ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    14ec:	deffff04 	addi	sp,sp,-4
    14f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    14f4:	000154c0 	call	154c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    14f8:	00800044 	movi	r2,1
    14fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1500:	dfc00017 	ldw	ra,0(sp)
    1504:	dec00104 	addi	sp,sp,4
    1508:	f800283a 	ret

0000150c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    150c:	f800283a 	ret

00001510 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1510:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1514:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1518:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    151c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1520:	2980072e 	bgeu	r5,r6,1540 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1524:	38c00037 	ldwio	r3,0(r7)
    1528:	18ffffec 	andhi	r3,r3,65535
    152c:	183ffc26 	beq	r3,zero,1520 <_gp+0xffff7f2c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1530:	28c00007 	ldb	r3,0(r5)
    1534:	20c00035 	stwio	r3,0(r4)
    1538:	29400044 	addi	r5,r5,1
    153c:	003ff806 	br	1520 <_gp+0xffff7f2c>

  return count;
}
    1540:	f800283a 	ret

00001544 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1544:	f800283a 	ret

00001548 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1548:	f800283a 	ret

0000154c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    154c:	000170fa 	wrctl	ienable,zero
    1550:	f800283a 	ret

00001554 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1554:	213ffe84 	addi	r4,r4,-6
    1558:	008003c4 	movi	r2,15
    155c:	11001636 	bltu	r2,r4,15b8 <alt_exception_cause_generated_bad_addr+0x64>
    1560:	200890ba 	slli	r4,r4,2
    1564:	00800034 	movhi	r2,0
    1568:	10855e04 	addi	r2,r2,5496
    156c:	2089883a 	add	r4,r4,r2
    1570:	20800017 	ldw	r2,0(r4)
    1574:	1000683a 	jmp	r2
    1578:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    157c:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    1580:	000015b8 	rdprs	zero,zero,86
    1584:	000015b8 	rdprs	zero,zero,86
    1588:	000015b8 	rdprs	zero,zero,86
    158c:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    1590:	000015b8 	rdprs	zero,zero,86
    1594:	000015b8 	rdprs	zero,zero,86
    1598:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    159c:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    15a0:	000015b8 	rdprs	zero,zero,86
    15a4:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
    15a8:	000015b8 	rdprs	zero,zero,86
    15ac:	000015b8 	rdprs	zero,zero,86
    15b0:	000015b8 	rdprs	zero,zero,86
    15b4:	000015c0 	call	15c <__alt_mem_RAM-0xea4>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    15b8:	0005883a 	mov	r2,zero
    15bc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    15c0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    15c4:	f800283a 	ret

000015c8 <strlen>:
    15c8:	2005883a 	mov	r2,r4
    15cc:	10c00007 	ldb	r3,0(r2)
    15d0:	18000226 	beq	r3,zero,15dc <strlen+0x14>
    15d4:	10800044 	addi	r2,r2,1
    15d8:	003ffc06 	br	15cc <_gp+0xffff7fd8>
    15dc:	1105c83a 	sub	r2,r2,r4
    15e0:	f800283a 	ret
