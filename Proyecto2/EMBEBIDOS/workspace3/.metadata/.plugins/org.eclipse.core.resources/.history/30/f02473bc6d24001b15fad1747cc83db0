#include "sys/alt_stdio.h"
#include <stddef.h>
#include <stdlib.h>
#include <system.h>
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"

volatile unsigned char *H_1 = (unsigned char *) H_1_BASE;
volatile unsigned char *H_2 = (unsigned char *) H_2_BASE;
volatile unsigned char *M_1 = (unsigned char *) M_1_BASE;
volatile unsigned char *M_2 = (unsigned char *) M_2_BASE;
volatile unsigned char *S_1 = (unsigned char *) S_1_BASE;
volatile unsigned char *S_2 = (unsigned char *) S_2_BASE;

//SET SETTINGS
volatile unsigned char *SET = (unsigned char *) SET_BASE;
volatile unsigned char *SET_MASK = (unsigned char *)(SET_BASE+8);
volatile unsigned char *SET_EDGE= (unsigned char *)(SET_BASE+12);
volatile int TEMP_EDGE;


void init_system(void);
void interrupt_handler(void* context);
//static void Setting(void* context);

static void IncrementTime(void);
void increment_seconds();
void increment_minutes();
void increment_hours();


void init_time()
{
	*H_1 = 1;
	*H_2 = 2;
	*M_1 = 0;
	*M_2 = 0;
	*S_1 = 0;
	*S_2 = 0;
}
void IncrementTime(void){
	alt_putstr("CLOCK!\n");
	increment_seconds();
}

void increment_seconds()
{
	if ((unsigned int)(*S_2) < 9)
		//Increases seconds's least significant digit
		*S_2 = *S_2 + 1;
	//The seconds's least significant digit reached the limit
	//Time to increase seconds's most significant digit
	else
	{
		if ((unsigned int)(*S_1) < 5)
		{
			//Increases seconds's most significant digit
			*S_1 = *S_1 + 1;
			*S_2 = 0;
		}
		else
		{
			*S_2 = 0;
			*S_1 = 0;
			increment_minutes();
		}
	}
}

void increment_minutes()
{
	if ((unsigned int)(*M_2) < 9)
		//Increases minutes's least significant digit
		*M_2 = *M_2 + 1;
	//The minutes's least significant digit reached the limit
	//Time to increase minutes's most significant digit
	else
	{
		if ((unsigned int)(*M_1) < 5)
		{
			//Increases minutes's most significant digit
			*M_1 = *M_1 + 1;
			*M_2 = 0;
		}
		else
		{
			*M_2 = 0;
			*M_1 = 0;
			increment_hours();
		}
	}
}

void increment_hours()
{
	if ((unsigned int)(*H_1) < 2)
	{
		if ((unsigned int)(*H_2) < 9)
			//Increases hours's least significant digit
			*H_2 = *H_2 + 1;
		//The hours's least significant digit reached the limit
		//Time to increase hour's most significant digit
		else
		{
			*H_1 = *H_1 + 1;
			*H_2 = 0;
		}
	}
	else
	{
		if ((unsigned int)(*H_2) < 3)
			//Increases hours's least significant digit
			*H_2 = *H_2 + 1;
		//The hours's digits reached the limit
		else
		{
			*H_2 = 0;
			*H_1 = 0;
		}
	}
}

//static void Setting(void* context){
//	alt_putstr("SETTING!\n");
//	volatile int *setPtr;
//	setPtr = (volatile int*) context;
//	*setPtr = *(SET+12);
//	*EDGE_CAPTURE = 0x00;
//
//}

void interrupt_handler(void* context)
{
    if (*(SET) == 0x01)
    {
        alt_putstr("Alarm mode: off\n");
    }
    else if (*(SET) == 0x02)
    {
        alt_putstr("Alarm mode: on\n");
    }

    *SET_EDGE = 0x00; //Clears the interrupt
}

void SetupClockCore(){
	// SETTING SET REG INTERRUPT

//	void * capturePtr = (void*) &TEMP_EDGE;
//	*MASK = 0xf;
//	*EDGE_CAPTURE = 0xf;
//	alt_ic_isr_register(
//			SET_IRQ_INTERRUPT_CONTROLLER_ID,
//			SET_IRQ,
//			Setting,
//			capturePtr,
//			0x00);
//	alt_putstr("Setup complete\n");


	alt_putstr("Initialize system ...\n");

	*(SET_MASK) = 0x07; //Writes to IRQ mask
	*(SET_EDGE) = 0x00; //Clears the interrupt

	//Registers the input interrupt
	alt_ic_isr_register(SET_IRQ_INTERRUPT_CONTROLLER_ID,
						SET_IRQ,
						interrupt_handler,
						0,
						0x0);

	//	SETTING TIMER INTERRUPT
	unsigned char *timerCoreControl = (unsigned char *) (TIMER_BASE + 0x4);
	alt_ic_isr_register(
			TIMER_IRQ_INTERRUPT_CONTROLLER_ID
			,TIMER_IRQ,
			IncrementTime,
			0, 0x00);
	*timerCoreControl = 0x0007;

	alt_putstr("Done\n");
}

int main()
{ 
  alt_putstr("Creating Clock System\n");
  SetupClockCore();
  while (1);

  return 0;
}
