
alarm_clock.elf:     file format elf32-littlenios2
alarm_clock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000378 memsz 0x00000378 flags r-x
    LOAD off    0x00001398 vaddr 0x00001398 paddr 0x000013b4 align 2**12
         filesz 0x0000001c memsz 0x0000001c flags rw-
    LOAD off    0x000013d0 vaddr 0x000013d0 paddr 0x000013d0 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  000013b4  2**0
                  CONTENTS
  2 .text         00000364  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000014  00001384  00001384  00001384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000001c  00001398  000013b4  00001398  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000024  000013d0  000013d0  000013d0  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000013f4  000013f4  000013b4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000170  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c3d  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000006d5  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000758  00000000  00000000  0000285a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001d0  00000000  00000000  00002fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000061e  00000000  00000000  00003184  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000101  00000000  00000000  000037a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000038a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  000038b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000047e9  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000047f1  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000047f5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000022  00000000  00000000  00004803  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000588b7  00000000  00000000  00004825  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001384 l    d  .rodata	00000000 .rodata
00001398 l    d  .rwdata	00000000 .rwdata
000013d0 l    d  .bss	00000000 .bss
000013f4 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../alarm_clock_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0000129c g     F .text	0000002c alt_main
000010fc g     F .text	00000050 increment_minutes
000013b4 g       *ABS*	00000000 __flash_rwdata_start
000013b0 g     O .rwdata	00000004 UART
000012c8 g     F .text	00000038 alt_putstr
00001360 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
000013d0 g     O .bss	00000004 alarm_H_1
00001020 g       *ABS*	00000000 __flash_exceptions_start
000013ec g     O .bss	00000004 alt_argv
00009398 g       *ABS*	00000000 _gp
0000114c g     F .text	00000050 increment_time
000013d4 g     O .bss	00000004 alarm_S_2
000013f4 g       *ABS*	00000000 __bss_end
000013d8 g     O .bss	00000004 alarm_S_1
000013dc g     O .bss	00000004 alarm_H_2
000013a8 g     O .rwdata	00000004 H_2
00001358 g     F .text	00000004 alt_dcache_flush_all
000013b4 g       *ABS*	00000000 __ram_rwdata_end
00001398 g       *ABS*	00000000 __ram_rodata_end
00001398 g     O .rwdata	00000004 S_2
000013f4 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
000013a4 g     O .rwdata	00000004 M_1
00001324 g     F .text	00000034 altera_avalon_jtag_uart_write
000013e0 g     O .bss	00000004 alarm_M_1
00001020 g     F .text	0000003c _start
00001320 g     F .text	00000004 alt_sys_init
000013ac g     O .rwdata	00000004 H_1
00001398 g       *ABS*	00000000 __ram_rwdata_start
00001384 g       *ABS*	00000000 __ram_rodata_start
000013f4 g       *ABS*	00000000 __alt_stack_base
000013a0 g     O .rwdata	00000004 M_2
000013d0 g       *ABS*	00000000 __bss_start
0000119c g     F .text	00000020 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
000013e8 g     O .bss	00000004 alt_envp
00001384 g       *ABS*	00000000 __flash_rodata_start
00001300 g     F .text	00000020 alt_irq_init
000013f0 g     O .bss	00000004 alt_argc
0000139c g     O .rwdata	00000004 S_1
00001020 g       *ABS*	00000000 __ram_exceptions_start
000013b4 g       *ABS*	00000000 _edata
000013f4 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
0000105c g     F .text	00000034 init_time
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000013e4 g     O .bss	00000004 alarm_M_2
00001368 g     F .text	0000001c strlen
0000135c g     F .text	00000004 alt_icache_flush_all
000011bc g     F .text	000000e0 alt_load
00001090 g     F .text	0000006c increment_hours



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a4e614 	ori	gp,gp,37784
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1084f414 	ori	r2,r2,5072

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c4fd14 	ori	r3,r3,5108

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7cac>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00011bc0 	call	11bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	000129c0 	call	129c <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7cc0>

0000105c <init_time>:
  return 0;
}

void init_time()
{
	*H_1 = 0;
    105c:	d0a00517 	ldw	r2,-32748(gp)
    1060:	10000005 	stb	zero,0(r2)
	*H_2 = 0;
    1064:	d0a00417 	ldw	r2,-32752(gp)
    1068:	10000005 	stb	zero,0(r2)
	*M_1 = 0;
    106c:	d0a00317 	ldw	r2,-32756(gp)
    1070:	10000005 	stb	zero,0(r2)
	*M_2 = 0;
    1074:	d0a00217 	ldw	r2,-32760(gp)
    1078:	10000005 	stb	zero,0(r2)
	*S_1 = 0;
    107c:	d0a00117 	ldw	r2,-32764(gp)
    1080:	10000005 	stb	zero,0(r2)
	*S_2 = 0;
    1084:	d0a00017 	ldw	r2,-32768(gp)
    1088:	10000005 	stb	zero,0(r2)
    108c:	f800283a 	ret

00001090 <increment_hours>:
	}
}

void increment_hours()
{
	if ((unsigned int)(*H_1) < 2)
    1090:	d0a00517 	ldw	r2,-32748(gp)
    1094:	01000044 	movi	r4,1
    1098:	10c00003 	ldbu	r3,0(r2)
    109c:	d0a00417 	ldw	r2,-32752(gp)
    10a0:	18c03fcc 	andi	r3,r3,255
    10a4:	20c00936 	bltu	r4,r3,10cc <increment_hours+0x3c>
	{
		if ((unsigned int)(*H_2) < 9)
    10a8:	10c00003 	ldbu	r3,0(r2)
    10ac:	01000204 	movi	r4,8
    10b0:	18c03fcc 	andi	r3,r3,255
    10b4:	20c0092e 	bgeu	r4,r3,10dc <increment_hours+0x4c>
			*H_2++;
		//The hours's least significant digit reached the limit
		//Time to increase hour's most significant digit
		else
		{
			*H_2 = 0;
    10b8:	10000005 	stb	zero,0(r2)
			*H_1++;
    10bc:	d0a00517 	ldw	r2,-32748(gp)
    10c0:	10c00044 	addi	r3,r2,1
    10c4:	d0e00515 	stw	r3,-32748(gp)
    10c8:	00000606 	br	10e4 <increment_hours+0x54>
		}
	}
	else
	{
		if ((unsigned int)(*H_2) < 3)
    10cc:	10c00003 	ldbu	r3,0(r2)
    10d0:	01000084 	movi	r4,2
    10d4:	18c03fcc 	andi	r3,r3,255
    10d8:	20c00436 	bltu	r4,r3,10ec <increment_hours+0x5c>
			//Increases hours's least significant digit
			*H_2++;
    10dc:	10c00044 	addi	r3,r2,1
    10e0:	d0e00415 	stw	r3,-32752(gp)
    10e4:	10800003 	ldbu	r2,0(r2)
    10e8:	f800283a 	ret
		//The hours's digits reached the limit
		else
		{
			*H_2 = 0;
    10ec:	10000005 	stb	zero,0(r2)
			*H_1 = 0;
    10f0:	d0a00517 	ldw	r2,-32748(gp)
    10f4:	10000005 	stb	zero,0(r2)
    10f8:	f800283a 	ret

000010fc <increment_minutes>:
	}
}

void increment_minutes()
{
	if ((unsigned int)(*M_2) < 9)
    10fc:	d0a00217 	ldw	r2,-32760(gp)
    1100:	01000204 	movi	r4,8
    1104:	10c00003 	ldbu	r3,0(r2)
    1108:	18c03fcc 	andi	r3,r3,255
    110c:	20c00336 	bltu	r4,r3,111c <increment_minutes+0x20>
		//Increases minutes's least significant digit
		*M_2++;
    1110:	10c00044 	addi	r3,r2,1
    1114:	d0e00215 	stw	r3,-32760(gp)
    1118:	00000806 	br	113c <increment_minutes+0x40>
	//The minutes's least significant digit reached the limit
	//Time to increase minutes's most significant digit
	else
	{
		*M_2 = 0;
    111c:	10000005 	stb	zero,0(r2)
		if ((unsigned int)(*M_1) < 5)
    1120:	d0a00317 	ldw	r2,-32756(gp)
    1124:	01000104 	movi	r4,4
    1128:	10c00003 	ldbu	r3,0(r2)
    112c:	18c03fcc 	andi	r3,r3,255
    1130:	20c00436 	bltu	r4,r3,1144 <increment_minutes+0x48>
			//Increases minutes's most significant digit
			*M_1++;
    1134:	10c00044 	addi	r3,r2,1
    1138:	d0e00315 	stw	r3,-32756(gp)
    113c:	10800003 	ldbu	r2,0(r2)
    1140:	f800283a 	ret
		else
		{
			*M_1 = 0;
    1144:	10000005 	stb	zero,0(r2)
			increment_hours();
    1148:	00010901 	jmpi	1090 <increment_hours>

0000114c <increment_time>:
	*S_2 = 0;
}

void increment_time()
{
	if ((unsigned int)(*S_2) < 9)
    114c:	d0a00017 	ldw	r2,-32768(gp)
    1150:	01000204 	movi	r4,8
    1154:	10c00003 	ldbu	r3,0(r2)
    1158:	18c03fcc 	andi	r3,r3,255
    115c:	20c00336 	bltu	r4,r3,116c <increment_time+0x20>
		//Increases seconds's least significant digit
		*S_2++;
    1160:	10c00044 	addi	r3,r2,1
    1164:	d0e00015 	stw	r3,-32768(gp)
    1168:	00000806 	br	118c <increment_time+0x40>
	//The seconds's least significant digit reached the limit
	//Time to increase seconds's most significant digit
	else
	{
		*S_2 = 0;
    116c:	10000005 	stb	zero,0(r2)
		if ((unsigned int)(*S_1) < 5)
    1170:	d0a00117 	ldw	r2,-32764(gp)
    1174:	01000104 	movi	r4,4
    1178:	10c00003 	ldbu	r3,0(r2)
    117c:	18c03fcc 	andi	r3,r3,255
    1180:	20c00436 	bltu	r4,r3,1194 <increment_time+0x48>
			//Increases seconds's most significant digit
			*S_1++;
    1184:	10c00044 	addi	r3,r2,1
    1188:	d0e00115 	stw	r3,-32764(gp)
    118c:	10800003 	ldbu	r2,0(r2)
    1190:	f800283a 	ret
		else
		{
			*S_1 = 0;
    1194:	10000005 	stb	zero,0(r2)
			increment_minutes();
    1198:	00010fc1 	jmpi	10fc <increment_minutes>

0000119c <main>:
void increment_minutes();
void increment_hours();

int main()
{ 
  alt_putstr("Alarm clock system\n");
    119c:	01000034 	movhi	r4,0
void increment_time();
void increment_minutes();
void increment_hours();

int main()
{ 
    11a0:	deffff04 	addi	sp,sp,-4
  alt_putstr("Alarm clock system\n");
    11a4:	2104e104 	addi	r4,r4,4996
void increment_time();
void increment_minutes();
void increment_hours();

int main()
{ 
    11a8:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Alarm clock system\n");
    11ac:	00012c80 	call	12c8 <alt_putstr>

  init_time();
    11b0:	000105c0 	call	105c <init_time>

  /* Event loop never exits. */
  while (1)
  {
	  increment_time();
    11b4:	000114c0 	call	114c <increment_time>
    11b8:	003ffe06 	br	11b4 <_gp+0xffff7e1c>

000011bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    11bc:	deffff04 	addi	sp,sp,-4
    11c0:	01000034 	movhi	r4,0
    11c4:	01400034 	movhi	r5,0
    11c8:	dfc00015 	stw	ra,0(sp)
    11cc:	2104e604 	addi	r4,r4,5016
    11d0:	2944ed04 	addi	r5,r5,5044

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    11d4:	2140061e 	bne	r4,r5,11f0 <alt_load+0x34>
    11d8:	01000034 	movhi	r4,0
    11dc:	01400034 	movhi	r5,0
    11e0:	21040804 	addi	r4,r4,4128
    11e4:	29440804 	addi	r5,r5,4128
    11e8:	2140121e 	bne	r4,r5,1234 <alt_load+0x78>
    11ec:	00000b06 	br	121c <alt_load+0x60>
    11f0:	00c00034 	movhi	r3,0
    11f4:	18c4ed04 	addi	r3,r3,5044
    11f8:	1907c83a 	sub	r3,r3,r4
    11fc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1200:	10fff526 	beq	r2,r3,11d8 <_gp+0xffff7e40>
    {
      *to++ = *from++;
    1204:	114f883a 	add	r7,r2,r5
    1208:	39c00017 	ldw	r7,0(r7)
    120c:	110d883a 	add	r6,r2,r4
    1210:	10800104 	addi	r2,r2,4
    1214:	31c00015 	stw	r7,0(r6)
    1218:	003ff906 	br	1200 <_gp+0xffff7e68>
    121c:	01000034 	movhi	r4,0
    1220:	01400034 	movhi	r5,0
    1224:	2104e104 	addi	r4,r4,4996
    1228:	2944e104 	addi	r5,r5,4996

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    122c:	2140101e 	bne	r4,r5,1270 <alt_load+0xb4>
    1230:	00000b06 	br	1260 <alt_load+0xa4>
    1234:	00c00034 	movhi	r3,0
    1238:	18c40804 	addi	r3,r3,4128
    123c:	1907c83a 	sub	r3,r3,r4
    1240:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1244:	10fff526 	beq	r2,r3,121c <_gp+0xffff7e84>
    {
      *to++ = *from++;
    1248:	114f883a 	add	r7,r2,r5
    124c:	39c00017 	ldw	r7,0(r7)
    1250:	110d883a 	add	r6,r2,r4
    1254:	10800104 	addi	r2,r2,4
    1258:	31c00015 	stw	r7,0(r6)
    125c:	003ff906 	br	1244 <_gp+0xffff7eac>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1260:	00013580 	call	1358 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1264:	dfc00017 	ldw	ra,0(sp)
    1268:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    126c:	000135c1 	jmpi	135c <alt_icache_flush_all>
    1270:	00c00034 	movhi	r3,0
    1274:	18c4e604 	addi	r3,r3,5016
    1278:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    127c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1280:	18bff726 	beq	r3,r2,1260 <_gp+0xffff7ec8>
    {
      *to++ = *from++;
    1284:	114f883a 	add	r7,r2,r5
    1288:	39c00017 	ldw	r7,0(r7)
    128c:	110d883a 	add	r6,r2,r4
    1290:	10800104 	addi	r2,r2,4
    1294:	31c00015 	stw	r7,0(r6)
    1298:	003ff906 	br	1280 <_gp+0xffff7ee8>

0000129c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    129c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12a0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    12a4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    12a8:	00013000 	call	1300 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    12ac:	00013200 	call	1320 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12b0:	d1a01417 	ldw	r6,-32688(gp)
    12b4:	d1601517 	ldw	r5,-32684(gp)
    12b8:	d1201617 	ldw	r4,-32680(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    12bc:	dfc00017 	ldw	ra,0(sp)
    12c0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    12c4:	000119c1 	jmpi	119c <main>

000012c8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    12c8:	defffe04 	addi	sp,sp,-8
    12cc:	dc000015 	stw	r16,0(sp)
    12d0:	dfc00115 	stw	ra,4(sp)
    12d4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    12d8:	00013680 	call	1368 <strlen>
    12dc:	01000034 	movhi	r4,0
    12e0:	000f883a 	mov	r7,zero
    12e4:	100d883a 	mov	r6,r2
    12e8:	800b883a 	mov	r5,r16
    12ec:	2104ec04 	addi	r4,r4,5040
#else
    return fputs(str, stdout);
#endif
#endif
}
    12f0:	dfc00117 	ldw	ra,4(sp)
    12f4:	dc000017 	ldw	r16,0(sp)
    12f8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    12fc:	00013241 	jmpi	1324 <altera_avalon_jtag_uart_write>

00001300 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1300:	deffff04 	addi	sp,sp,-4
    1304:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1308:	00013600 	call	1360 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    130c:	00800044 	movi	r2,1
    1310:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1314:	dfc00017 	ldw	ra,0(sp)
    1318:	dec00104 	addi	sp,sp,4
    131c:	f800283a 	ret

00001320 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1320:	f800283a 	ret

00001324 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1324:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1328:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    132c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1330:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1334:	2980072e 	bgeu	r5,r6,1354 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1338:	38c00037 	ldwio	r3,0(r7)
    133c:	18ffffec 	andhi	r3,r3,65535
    1340:	183ffc26 	beq	r3,zero,1334 <_gp+0xffff7f9c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1344:	28c00007 	ldb	r3,0(r5)
    1348:	20c00035 	stwio	r3,0(r4)
    134c:	29400044 	addi	r5,r5,1
    1350:	003ff806 	br	1334 <_gp+0xffff7f9c>

  return count;
}
    1354:	f800283a 	ret

00001358 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1358:	f800283a 	ret

0000135c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    135c:	f800283a 	ret

00001360 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1360:	000170fa 	wrctl	ienable,zero
    1364:	f800283a 	ret

00001368 <strlen>:
    1368:	2005883a 	mov	r2,r4
    136c:	10c00007 	ldb	r3,0(r2)
    1370:	18000226 	beq	r3,zero,137c <strlen+0x14>
    1374:	10800044 	addi	r2,r2,1
    1378:	003ffc06 	br	136c <_gp+0xffff7fd4>
    137c:	1105c83a 	sub	r2,r2,r4
    1380:	f800283a 	ret
